{"ast":null,"code":"import { fork, take, all, put, call } from 'redux-saga/effects';\nimport * as watchActions from '../actions/watch';\nimport { buildVideoDetailRequest, buildRelatedVideosRequest, buildChannelRequest, buildCommentThreadRequest } from '../api/youtube-api';\nimport { REQUEST } from '../actions';\nimport { SEARCH_LIST_RESPONSE, VIDEO_LIST_RESPONSE } from '../api/youtube-api-response-types';\nexport function* fetchWatchDetails(videoId, channelId) {\n  let requests = [buildVideoDetailRequest.bind(null, videoId), buildRelatedVideosRequest.bind(null, videoId), buildCommentThreadRequest.bind(null, videoId)];\n\n  if (channelId) {\n    requests.push(buildChannelRequest.bind(null, channelId));\n  }\n\n  try {\n    const responses = yield all(requests.map(fn => call(fn)));\n    yield put(watchActions.details.success(responses, videoId));\n    yield call(fetchVideoDetails, responses, channelId === null);\n  } catch (error) {\n    yield put(watchActions.details.failure(error));\n  }\n}\n\nfunction* fetchVideoDetails(responses, shouldFetchChannelInfo) {\n  const searchListResponse = responses.find(response => response.result.kind === SEARCH_LIST_RESPONSE);\n  const relatedVideoIds = searchListResponse.result.items.map(relatedVideo => relatedVideo.id.videoId);\n  const requests = relatedVideoIds.map(relatedVideoId => {\n    return buildVideoDetailRequest.bind(null, relatedVideoId);\n  });\n\n  if (shouldFetchChannelInfo) {\n    // we have to extract the video's channel id from the video details response\n    // so we can load additional channel information.\n    // this is only needed, when a user directly accesses .../watch?v=1234\n    // because then we only know the video id\n    const videoDetailResponse = responses.find(response => response.result.kind === VIDEO_LIST_RESPONSE);\n    const videos = videoDetailResponse.result.items;\n\n    if (videos && videos.length) {\n      requests.push(buildChannelRequest.bind(null, videos[0].snippet.channelId));\n    }\n  }\n\n  try {\n    const responses = yield all(requests.map(fn => call(fn)));\n    yield put(watchActions.videoDetails.success(responses));\n  } catch (error) {\n    yield put(watchActions.videoDetails.failure(error));\n  }\n}\n/******************************************************************************/\n\n/******************************* WATCHERS *************************************/\n\n/******************************************************************************/\n\n\nexport function* watchWatchDetails() {\n  while (true) {\n    const {\n      videoId,\n      channelId\n    } = yield take(watchActions.WATCH_DETAILS[REQUEST]);\n    yield fork(fetchWatchDetails, videoId, channelId);\n  }\n}","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/sagas/watch.js"],"names":["fork","take","all","put","call","watchActions","buildVideoDetailRequest","buildRelatedVideosRequest","buildChannelRequest","buildCommentThreadRequest","REQUEST","SEARCH_LIST_RESPONSE","VIDEO_LIST_RESPONSE","fetchWatchDetails","videoId","channelId","requests","bind","push","responses","map","fn","details","success","fetchVideoDetails","error","failure","shouldFetchChannelInfo","searchListResponse","find","response","result","kind","relatedVideoIds","items","relatedVideo","id","relatedVideoId","videoDetailResponse","videos","length","snippet","videoDetails","watchWatchDetails","WATCH_DETAILS"],"mappings":"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","sourcesContent":["import {fork, take, all, put, call} from 'redux-saga/effects';\nimport * as watchActions from '../actions/watch';\nimport {\n  buildVideoDetailRequest,\n  buildRelatedVideosRequest,\n  buildChannelRequest,\n  buildCommentThreadRequest\n} from '../api/youtube-api';\nimport {REQUEST} from '../actions';\nimport {SEARCH_LIST_RESPONSE, VIDEO_LIST_RESPONSE} from '../api/youtube-api-response-types';\n\nexport function* fetchWatchDetails(videoId, channelId) {\n  let requests = [\n    buildVideoDetailRequest.bind(null, videoId),\n    buildRelatedVideosRequest.bind(null, videoId),\n    buildCommentThreadRequest.bind(null, videoId)\n  ];\n\n  if (channelId) {\n    requests.push(buildChannelRequest.bind(null, channelId));\n  }\n\n  try {\n    const responses = yield all(requests.map(fn => call(fn)));\n    yield put(watchActions.details.success(responses, videoId));\n    yield call (fetchVideoDetails, responses, channelId === null);\n  } catch (error) {\n    yield put(watchActions.details.failure(error));\n  }\n}\n\nfunction* fetchVideoDetails(responses, shouldFetchChannelInfo) {\n  const searchListResponse = responses.find(response => response.result.kind === SEARCH_LIST_RESPONSE);\n  const relatedVideoIds =  searchListResponse.result.items.map(relatedVideo => relatedVideo.id.videoId);\n\n  const requests = relatedVideoIds.map(relatedVideoId => {\n    return buildVideoDetailRequest.bind(null, relatedVideoId);\n  });\n\n  if (shouldFetchChannelInfo) {\n    // we have to extract the video's channel id from the video details response\n    // so we can load additional channel information.\n    // this is only needed, when a user directly accesses .../watch?v=1234\n    // because then we only know the video id\n    const videoDetailResponse = responses.find(response => response.result.kind === VIDEO_LIST_RESPONSE);\n    const videos = videoDetailResponse.result.items;\n    if (videos && videos.length) {\n      requests.push(buildChannelRequest.bind(null, videos[0].snippet.channelId));\n    }\n  }\n\n  try {\n    const responses = yield all(requests.map(fn => call(fn)));\n    yield put(watchActions.videoDetails.success(responses));\n  } catch (error) {\n    yield put(watchActions.videoDetails.failure(error));\n  }\n}\n\n\n/******************************************************************************/\n/******************************* WATCHERS *************************************/\n/******************************************************************************/\nexport function* watchWatchDetails() {\n  while (true) {\n    const {videoId, channelId} = yield take(watchActions.WATCH_DETAILS[REQUEST]);\n    yield fork(fetchWatchDetails, videoId, channelId);\n  }\n}"]},"metadata":{},"sourceType":"module"}