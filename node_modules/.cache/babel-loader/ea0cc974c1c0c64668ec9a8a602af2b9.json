{"ast":null,"code":"import _defineProperty from\"/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{SUCCESS}from'../actions';import{WATCH_DETAILS}from'../actions/watch';import{COMMENT_THREAD_LIST_RESPONSE}from'../api/youtube-api-response-types';import{createSelector}from'reselect';import{COMMENT_THREAD}from'../actions/comment';import{getSearchParam}from'../../services/url';var initialState={byVideo:{},byId:{}};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case COMMENT_THREAD[SUCCESS]:return reduceCommentThread(action.response,action.videoId,state);case WATCH_DETAILS[SUCCESS]:return reduceWatchDetails(action.response,action.videoId,state);default:return state;}}function reduceWatchDetails(responses,videoId,prevState){var commentThreadResponse=responses.find(function(res){return res.result.kind===COMMENT_THREAD_LIST_RESPONSE;});return reduceCommentThread(commentThreadResponse.result,videoId,prevState);}function reduceCommentThread(response,videoId,prevState){if(!response){return prevState;}var newComments=response.items.reduce(function(acc,item){acc[item.id]=item;return acc;},{});// if we have already fetched some comments for a particular video\n// we just append the ids for the new comments\nvar prevCommentIds=prevState.byVideo[videoId]?prevState.byVideo[videoId].ids:[];var commentIds=[].concat(_toConsumableArray(prevCommentIds),_toConsumableArray(Object.keys(newComments)));var byVideoComment={nextPageToken:response.nextPageToken,ids:commentIds};return _objectSpread(_objectSpread({},prevState),{},{byId:_objectSpread(_objectSpread({},prevState.byId),newComments),byVideo:_objectSpread(_objectSpread({},prevState.byVideo),{},_defineProperty({},videoId,byVideoComment))});}/*\n* Selectors\n */var getCommentIdsForVideo=function getCommentIdsForVideo(state,videoId){var comment=state.comments.byVideo[videoId];if(comment){return comment.ids;}return[];};export var getCommentsForVideo=createSelector(getCommentIdsForVideo,function(state){return state.comments.byId;},function(commentIds,allComments){return commentIds.map(function(commentId){return allComments[commentId];});});var getComment=function getComment(state,location){var videoId=getSearchParam(location,'v');return state.comments.byVideo[videoId];};export var getCommentNextPageToken=createSelector(getComment,function(comment){return comment?comment.nextPageToken:null;});","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/reducers/comments.js"],"names":["SUCCESS","WATCH_DETAILS","COMMENT_THREAD_LIST_RESPONSE","createSelector","COMMENT_THREAD","getSearchParam","initialState","byVideo","byId","state","action","type","reduceCommentThread","response","videoId","reduceWatchDetails","responses","prevState","commentThreadResponse","find","res","result","kind","newComments","items","reduce","acc","item","id","prevCommentIds","ids","commentIds","Object","keys","byVideoComment","nextPageToken","getCommentIdsForVideo","comment","comments","getCommentsForVideo","allComments","map","commentId","getComment","location","getCommentNextPageToken"],"mappings":"ijBAAA,OAAQA,OAAR,KAAsB,YAAtB,CACA,OAAQC,aAAR,KAA4B,kBAA5B,CACA,OAAQC,4BAAR,KAA2C,mCAA3C,CACA,OAAQC,cAAR,KAA6B,UAA7B,CACA,OAAQC,cAAR,KAA6B,oBAA7B,CACA,OAAQC,cAAR,KAA6B,oBAA7B,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,OAAO,CAAE,EADU,CAEnBC,IAAI,CAAE,EAFa,CAArB,CAIA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBH,YAAsB,IAARI,CAAAA,MAAQ,2CACrD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKP,CAAAA,cAAc,CAACJ,OAAD,CAAnB,CACE,MAAOY,CAAAA,mBAAmB,CAACF,MAAM,CAACG,QAAR,CAAkBH,MAAM,CAACI,OAAzB,CAAkCL,KAAlC,CAA1B,CACF,IAAKR,CAAAA,aAAa,CAACD,OAAD,CAAlB,CACE,MAAOe,CAAAA,kBAAkB,CAACL,MAAM,CAACG,QAAR,CAAkBH,MAAM,CAACI,OAAzB,CAAkCL,KAAlC,CAAzB,CACF,QACE,MAAOA,CAAAA,KAAP,CANJ,CAQD,CAED,QAASM,CAAAA,kBAAT,CAA4BC,SAA5B,CAAuCF,OAAvC,CAAgDG,SAAhD,CAA2D,CACzD,GAAMC,CAAAA,qBAAqB,CAAGF,SAAS,CAACG,IAAV,CAAe,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,MAAJ,CAAWC,IAAX,GAAoBpB,4BAAxB,EAAlB,CAA9B,CACA,MAAOU,CAAAA,mBAAmB,CAACM,qBAAqB,CAACG,MAAvB,CAA+BP,OAA/B,CAAwCG,SAAxC,CAA1B,CACD,CAED,QAASL,CAAAA,mBAAT,CAA6BC,QAA7B,CAAuCC,OAAvC,CAAgDG,SAAhD,CAA2D,CACzD,GAAI,CAACJ,QAAL,CAAe,CACb,MAAOI,CAAAA,SAAP,CACD,CACD,GAAMM,CAAAA,WAAW,CAAGV,QAAQ,CAACW,KAAT,CAAeC,MAAf,CAAsB,SAACC,GAAD,CAAMC,IAAN,CAAe,CACvDD,GAAG,CAACC,IAAI,CAACC,EAAN,CAAH,CAAeD,IAAf,CACA,MAAOD,CAAAA,GAAP,CACD,CAHmB,CAGjB,EAHiB,CAApB,CAKA;AACA;AACA,GAAMG,CAAAA,cAAc,CAAGZ,SAAS,CAACV,OAAV,CAAkBO,OAAlB,EAA6BG,SAAS,CAACV,OAAV,CAAkBO,OAAlB,EAA2BgB,GAAxD,CAA8D,EAArF,CACA,GAAMC,CAAAA,UAAU,8BAAOF,cAAP,qBAA0BG,MAAM,CAACC,IAAP,CAAYV,WAAZ,CAA1B,EAAhB,CAEA,GAAMW,CAAAA,cAAc,CAAG,CACrBC,aAAa,CAAEtB,QAAQ,CAACsB,aADH,CAErBL,GAAG,CAAEC,UAFgB,CAAvB,CAKA,sCACKd,SADL,MAEET,IAAI,gCACCS,SAAS,CAACT,IADX,EAECe,WAFD,CAFN,CAMEhB,OAAO,gCACFU,SAAS,CAACV,OADR,wBAEJO,OAFI,CAEMoB,cAFN,EANT,GAWD,CAED;;GAGA,GAAME,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAC3B,KAAD,CAAQK,OAAR,CAAoB,CAChD,GAAMuB,CAAAA,OAAO,CAAG5B,KAAK,CAAC6B,QAAN,CAAe/B,OAAf,CAAuBO,OAAvB,CAAhB,CACA,GAAIuB,OAAJ,CAAa,CACX,MAAOA,CAAAA,OAAO,CAACP,GAAf,CACD,CACD,MAAO,EAAP,CACD,CAND,CAOA,MAAO,IAAMS,CAAAA,mBAAmB,CAAGpC,cAAc,CAC/CiC,qBAD+C,CAE/C,SAAA3B,KAAK,QAAIA,CAAAA,KAAK,CAAC6B,QAAN,CAAe9B,IAAnB,EAF0C,CAG/C,SAACuB,UAAD,CAAaS,WAAb,CAA6B,CAC3B,MAAOT,CAAAA,UAAU,CAACU,GAAX,CAAe,SAAAC,SAAS,QAAIF,CAAAA,WAAW,CAACE,SAAD,CAAf,EAAxB,CAAP,CACD,CAL8C,CAA1C,CAQP,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAClC,KAAD,CAAQmC,QAAR,CAAqB,CACtC,GAAM9B,CAAAA,OAAO,CAAGT,cAAc,CAACuC,QAAD,CAAW,GAAX,CAA9B,CACA,MAAOnC,CAAAA,KAAK,CAAC6B,QAAN,CAAe/B,OAAf,CAAuBO,OAAvB,CAAP,CACD,CAHD,CAIA,MAAO,IAAM+B,CAAAA,uBAAuB,CAAG1C,cAAc,CACnDwC,UADmD,CAEnD,SAACN,OAAD,CAAa,CACX,MAAOA,CAAAA,OAAO,CAAGA,OAAO,CAACF,aAAX,CAA2B,IAAzC,CACD,CAJkD,CAA9C","sourcesContent":["import {SUCCESS} from '../actions';\nimport {WATCH_DETAILS} from '../actions/watch';\nimport {COMMENT_THREAD_LIST_RESPONSE} from '../api/youtube-api-response-types';\nimport {createSelector} from 'reselect';\nimport {COMMENT_THREAD} from '../actions/comment';\nimport {getSearchParam} from '../../services/url';\n\nconst initialState = {\n  byVideo: {},\n  byId: {},\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case COMMENT_THREAD[SUCCESS]:\n      return reduceCommentThread(action.response, action.videoId, state);\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, action.videoId, state);\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, videoId, prevState) {\n  const commentThreadResponse = responses.find(res => res.result.kind === COMMENT_THREAD_LIST_RESPONSE);\n  return reduceCommentThread(commentThreadResponse.result, videoId, prevState);\n}\n\nfunction reduceCommentThread(response, videoId, prevState) {\n  if (!response) {\n    return prevState;\n  }\n  const newComments = response.items.reduce((acc, item) => {\n    acc[item.id] = item;\n    return acc;\n  }, {});\n\n  // if we have already fetched some comments for a particular video\n  // we just append the ids for the new comments\n  const prevCommentIds = prevState.byVideo[videoId] ? prevState.byVideo[videoId].ids : [];\n  const commentIds = [...prevCommentIds, ...Object.keys(newComments)];\n\n  const byVideoComment = {\n    nextPageToken: response.nextPageToken,\n    ids: commentIds,\n  };\n\n  return {\n    ...prevState,\n    byId: {\n      ...prevState.byId,\n      ...newComments,\n    },\n    byVideo: {\n      ...prevState.byVideo,\n      [videoId]: byVideoComment,\n    }\n  };\n}\n\n/*\n* Selectors\n */\nconst getCommentIdsForVideo = (state, videoId) => {\n  const comment = state.comments.byVideo[videoId];\n  if (comment) {\n    return comment.ids;\n  }\n  return [];\n};\nexport const getCommentsForVideo = createSelector(\n  getCommentIdsForVideo,\n  state => state.comments.byId,\n  (commentIds, allComments) => {\n    return commentIds.map(commentId => allComments[commentId]);\n  }\n);\n\nconst getComment = (state, location) => {\n  const videoId = getSearchParam(location, 'v');\n  return state.comments.byVideo[videoId];\n};\nexport const getCommentNextPageToken = createSelector(\n  getComment,\n  (comment) => {\n    return comment ? comment.nextPageToken : null;\n  }\n);"]},"metadata":{},"sourceType":"module"}