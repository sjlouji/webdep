{"ast":null,"code":"import _regeneratorRuntime from\"/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchWatchDetails),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchVideoDetails),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(watchWatchDetails);import{fork,take,all,put,call}from'redux-saga/effects';import*as watchActions from'../actions/watch';import{buildVideoDetailRequest,buildRelatedVideosRequest,buildChannelRequest,buildCommentThreadRequest}from'../api/youtube-api';import{REQUEST}from'../actions';import{SEARCH_LIST_RESPONSE,VIDEO_LIST_RESPONSE}from'../api/youtube-api-response-types';export function fetchWatchDetails(videoId,channelId){var requests,responses;return _regeneratorRuntime.wrap(function fetchWatchDetails$(_context){while(1){switch(_context.prev=_context.next){case 0:requests=[buildVideoDetailRequest.bind(null,videoId),buildRelatedVideosRequest.bind(null,videoId),buildCommentThreadRequest.bind(null,videoId)];if(channelId){requests.push(buildChannelRequest.bind(null,channelId));}_context.prev=2;_context.next=5;return all(requests.map(function(fn){return call(fn);}));case 5:responses=_context.sent;_context.next=8;return put(watchActions.details.success(responses,videoId));case 8:_context.next=10;return call(fetchVideoDetails,responses,channelId===null);case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);_context.next=16;return put(watchActions.details.failure(_context.t0));case 16:case\"end\":return _context.stop();}}},_marked,null,[[2,12]]);}function fetchVideoDetails(responses,shouldFetchChannelInfo){var searchListResponse,relatedVideoIds,requests,videoDetailResponse,videos,_responses;return _regeneratorRuntime.wrap(function fetchVideoDetails$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:searchListResponse=responses.find(function(response){return response.result.kind===SEARCH_LIST_RESPONSE;});relatedVideoIds=searchListResponse.result.items.map(function(relatedVideo){return relatedVideo.id.videoId;});requests=relatedVideoIds.map(function(relatedVideoId){return buildVideoDetailRequest.bind(null,relatedVideoId);});if(shouldFetchChannelInfo){// we have to extract the video's channel id from the video details response\n// so we can load additional channel information.\n// this is only needed, when a user directly accesses .../watch?v=1234\n// because then we only know the video id\nvideoDetailResponse=responses.find(function(response){return response.result.kind===VIDEO_LIST_RESPONSE;});videos=videoDetailResponse.result.items;if(videos&&videos.length){requests.push(buildChannelRequest.bind(null,videos[0].snippet.channelId));}}_context2.prev=4;_context2.next=7;return all(requests.map(function(fn){return call(fn);}));case 7:_responses=_context2.sent;_context2.next=10;return put(watchActions.videoDetails.success(_responses));case 10:_context2.next=16;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](4);_context2.next=16;return put(watchActions.videoDetails.failure(_context2.t0));case 16:case\"end\":return _context2.stop();}}},_marked2,null,[[4,12]]);}/******************************************************************************/ /******************************* WATCHERS *************************************/ /******************************************************************************/export function watchWatchDetails(){var _yield$take,videoId,channelId;return _regeneratorRuntime.wrap(function watchWatchDetails$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!true){_context3.next=10;break;}_context3.next=3;return take(watchActions.WATCH_DETAILS[REQUEST]);case 3:_yield$take=_context3.sent;videoId=_yield$take.videoId;channelId=_yield$take.channelId;_context3.next=8;return fork(fetchWatchDetails,videoId,channelId);case 8:_context3.next=0;break;case 10:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/sagas/watch.js"],"names":["fetchWatchDetails","fetchVideoDetails","watchWatchDetails","fork","take","all","put","call","watchActions","buildVideoDetailRequest","buildRelatedVideosRequest","buildChannelRequest","buildCommentThreadRequest","REQUEST","SEARCH_LIST_RESPONSE","VIDEO_LIST_RESPONSE","videoId","channelId","requests","bind","push","map","fn","responses","details","success","failure","shouldFetchChannelInfo","searchListResponse","find","response","result","kind","relatedVideoIds","items","relatedVideo","id","relatedVideoId","videoDetailResponse","videos","length","snippet","videoDetails","WATCH_DETAILS"],"mappings":"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","sourcesContent":["import {fork, take, all, put, call} from 'redux-saga/effects';\nimport * as watchActions from '../actions/watch';\nimport {\n  buildVideoDetailRequest,\n  buildRelatedVideosRequest,\n  buildChannelRequest,\n  buildCommentThreadRequest\n} from '../api/youtube-api';\nimport {REQUEST} from '../actions';\nimport {SEARCH_LIST_RESPONSE, VIDEO_LIST_RESPONSE} from '../api/youtube-api-response-types';\n\nexport function* fetchWatchDetails(videoId, channelId) {\n  let requests = [\n    buildVideoDetailRequest.bind(null, videoId),\n    buildRelatedVideosRequest.bind(null, videoId),\n    buildCommentThreadRequest.bind(null, videoId)\n  ];\n\n  if (channelId) {\n    requests.push(buildChannelRequest.bind(null, channelId));\n  }\n\n  try {\n    const responses = yield all(requests.map(fn => call(fn)));\n    yield put(watchActions.details.success(responses, videoId));\n    yield call (fetchVideoDetails, responses, channelId === null);\n  } catch (error) {\n    yield put(watchActions.details.failure(error));\n  }\n}\n\nfunction* fetchVideoDetails(responses, shouldFetchChannelInfo) {\n  const searchListResponse = responses.find(response => response.result.kind === SEARCH_LIST_RESPONSE);\n  const relatedVideoIds =  searchListResponse.result.items.map(relatedVideo => relatedVideo.id.videoId);\n\n  const requests = relatedVideoIds.map(relatedVideoId => {\n    return buildVideoDetailRequest.bind(null, relatedVideoId);\n  });\n\n  if (shouldFetchChannelInfo) {\n    // we have to extract the video's channel id from the video details response\n    // so we can load additional channel information.\n    // this is only needed, when a user directly accesses .../watch?v=1234\n    // because then we only know the video id\n    const videoDetailResponse = responses.find(response => response.result.kind === VIDEO_LIST_RESPONSE);\n    const videos = videoDetailResponse.result.items;\n    if (videos && videos.length) {\n      requests.push(buildChannelRequest.bind(null, videos[0].snippet.channelId));\n    }\n  }\n\n  try {\n    const responses = yield all(requests.map(fn => call(fn)));\n    yield put(watchActions.videoDetails.success(responses));\n  } catch (error) {\n    yield put(watchActions.videoDetails.failure(error));\n  }\n}\n\n\n/******************************************************************************/\n/******************************* WATCHERS *************************************/\n/******************************************************************************/\nexport function* watchWatchDetails() {\n  while (true) {\n    const {videoId, channelId} = yield take(watchActions.WATCH_DETAILS[REQUEST]);\n    yield fork(fetchWatchDetails, videoId, channelId);\n  }\n}"]},"metadata":{},"sourceType":"module"}