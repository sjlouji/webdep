{"ast":null,"code":"import { VIDEO_DETAILS, WATCH_DETAILS } from '../actions/watch';\nimport { SUCCESS } from '../actions';\nimport { CHANNEL_LIST_RESPONSE } from '../api/youtube-api-response-types';\nconst initialState = {\n  byId: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, state);\n\n    case VIDEO_DETAILS[SUCCESS]:\n      return reduceVideoDetails(action.response, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, prevState) {\n  const channelResponse = responses.find(response => response.result.kind === CHANNEL_LIST_RESPONSE);\n  let channels = {};\n\n  if (channelResponse && channelResponse.result.items) {\n    // we know that there will only be one item\n    // because we ask for a channel with a specific id\n    const channel = channelResponse.result.items[0];\n    channels[channel.id] = channel;\n  }\n\n  return { ...prevState,\n    byId: { ...prevState.byId,\n      ...channels\n    }\n  };\n}\n\nfunction reduceVideoDetails(responses, prevState) {\n  const channelResponse = responses.find(response => response.result.kind === CHANNEL_LIST_RESPONSE);\n  let channelEntry = {};\n\n  if (channelResponse && channelResponse.result.items) {\n    // we're explicitly asking for a channel with a particular id\n    // so the response set must either contain 0 items (if a channel with the specified id does not exist)\n    // or at most one item (i.e. the channel we've been asking for)\n    const channel = channelResponse.result.items[0];\n    channelEntry = {\n      [channel.id]: channel\n    };\n  }\n\n  return { ...prevState,\n    byId: { ...prevState.byId,\n      ...channelEntry\n    }\n  };\n}\n/*\n*   Selectors\n* */\n\n\nexport const getChannel = (state, channelId) => {\n  if (!channelId) return null;\n  return state.channels.byId[channelId];\n};","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/reducers/channels.js"],"names":["VIDEO_DETAILS","WATCH_DETAILS","SUCCESS","CHANNEL_LIST_RESPONSE","initialState","byId","state","action","type","reduceWatchDetails","response","reduceVideoDetails","responses","prevState","channelResponse","find","result","kind","channels","items","channel","id","channelEntry","getChannel","channelId"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,aAAvB,QAA2C,kBAA3C;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,qBAAR,QAAoC,mCAApC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,eAAe,UAAUC,KAAK,GAAGF,YAAlB,EAAgCG,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAa,CAACC,OAAD,CAAlB;AACE,aAAOO,kBAAkB,CAACF,MAAM,CAACG,QAAR,EAAkBJ,KAAlB,CAAzB;;AACF,SAAKN,aAAa,CAACE,OAAD,CAAlB;AACE,aAAOS,kBAAkB,CAACJ,MAAM,CAACG,QAAR,EAAkBJ,KAAlB,CAAzB;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASG,kBAAT,CAA4BG,SAA5B,EAAuCC,SAAvC,EAAkD;AAChD,QAAMC,eAAe,GAAGF,SAAS,CAACG,IAAV,CAAeL,QAAQ,IAAIA,QAAQ,CAACM,MAAT,CAAgBC,IAAhB,KAAyBd,qBAApD,CAAxB;AACA,MAAIe,QAAQ,GAAG,EAAf;;AACA,MAAIJ,eAAe,IAAIA,eAAe,CAACE,MAAhB,CAAuBG,KAA9C,EAAqD;AACnD;AACA;AACA,UAAMC,OAAO,GAAGN,eAAe,CAACE,MAAhB,CAAuBG,KAAvB,CAA6B,CAA7B,CAAhB;AACAD,IAAAA,QAAQ,CAACE,OAAO,CAACC,EAAT,CAAR,GAAuBD,OAAvB;AACD;;AACD,SAAO,EACL,GAAGP,SADE;AAELR,IAAAA,IAAI,EAAE,EACJ,GAAGQ,SAAS,CAACR,IADT;AAEJ,SAAGa;AAFC;AAFD,GAAP;AAOD;;AAED,SAASP,kBAAT,CAA4BC,SAA5B,EAAuCC,SAAvC,EAAkD;AAChD,QAAMC,eAAe,GAAGF,SAAS,CAACG,IAAV,CAAeL,QAAQ,IAAIA,QAAQ,CAACM,MAAT,CAAgBC,IAAhB,KAAyBd,qBAApD,CAAxB;AACA,MAAImB,YAAY,GAAG,EAAnB;;AACA,MAAIR,eAAe,IAAIA,eAAe,CAACE,MAAhB,CAAuBG,KAA9C,EAAqD;AACnD;AACA;AACA;AACA,UAAMC,OAAO,GAAGN,eAAe,CAACE,MAAhB,CAAuBG,KAAvB,CAA6B,CAA7B,CAAhB;AACAG,IAAAA,YAAY,GAAI;AACd,OAACF,OAAO,CAACC,EAAT,GAAcD;AADA,KAAhB;AAGD;;AAED,SAAO,EACL,GAAGP,SADE;AAELR,IAAAA,IAAI,EAAE,EACJ,GAAGQ,SAAS,CAACR,IADT;AAEJ,SAAGiB;AAFC;AAFD,GAAP;AAOD;AAED;;;;;AAGA,OAAO,MAAMC,UAAU,GAAG,CAACjB,KAAD,EAAQkB,SAAR,KAAsB;AAC9C,MAAI,CAACA,SAAL,EAAgB,OAAO,IAAP;AAChB,SAAOlB,KAAK,CAACY,QAAN,CAAeb,IAAf,CAAoBmB,SAApB,CAAP;AACD,CAHM","sourcesContent":["import {VIDEO_DETAILS, WATCH_DETAILS} from '../actions/watch';\nimport {SUCCESS} from '../actions';\nimport {CHANNEL_LIST_RESPONSE} from '../api/youtube-api-response-types';\n\nconst initialState = {\n  byId: {}\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, state);\n    case VIDEO_DETAILS[SUCCESS]:\n      return reduceVideoDetails(action.response, state);\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, prevState) {\n  const channelResponse = responses.find(response => response.result.kind === CHANNEL_LIST_RESPONSE);\n  let channels = {};\n  if (channelResponse && channelResponse.result.items) {\n    // we know that there will only be one item\n    // because we ask for a channel with a specific id\n    const channel = channelResponse.result.items[0];\n    channels[channel.id] = channel;\n  }\n  return {\n    ...prevState,\n    byId: {\n      ...prevState.byId,\n      ...channels\n    }\n  };\n}\n\nfunction reduceVideoDetails(responses, prevState) {\n  const channelResponse = responses.find(response => response.result.kind === CHANNEL_LIST_RESPONSE);\n  let channelEntry = {};\n  if (channelResponse && channelResponse.result.items) {\n    // we're explicitly asking for a channel with a particular id\n    // so the response set must either contain 0 items (if a channel with the specified id does not exist)\n    // or at most one item (i.e. the channel we've been asking for)\n    const channel = channelResponse.result.items[0];\n    channelEntry =  {\n      [channel.id]: channel,\n    }\n  }\n\n  return {\n    ...prevState,\n    byId: {\n      ...prevState.byId,\n      ...channelEntry,\n    }\n  };\n}\n\n/*\n*   Selectors\n* */\nexport const getChannel = (state, channelId) => {\n  if (!channelId) return null;\n  return state.channels.byId[channelId];\n};"]},"metadata":{},"sourceType":"module"}