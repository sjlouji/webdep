{"ast":null,"code":"var _jsxFileName = \"/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/pages/SearchListPage/Component/InfiniteScrolls.js\";\nimport React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Moment from 'react-moment';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport NumericLabel from 'react-pretty-numbers';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { Row, Col } from 'react-bootstrap';\nimport Grid from '@material-ui/core/Grid';\nimport { Container, Divider } from '@material-ui/core';\nimport TextTruncate from 'react-text-truncate'; // recommend\n\nconst items = new Array(30).fill(0).map((_, index) => ({\n  id: index,\n  name: `Number ${index}`\n}));\nconst option = {\n  'justification': 'L',\n  'locales': 'en-US',\n  'currency': false,\n  'percentage': false,\n  'wholenumber': 'ceil',\n  'commafy': true,\n  'cssClass': ['red'],\n  'shortFormat': true,\n  'shortFormatMinValue': 10000,\n  'title': true\n};\n\nfunction InfiniteScrolls(props) {\n  const [loadedIems, setLoadedItems] = useState([]);\n  const [offset, setOffset] = useState(0);\n\n  const loadMore = (offset = 0, limit = 10) => {\n    if (offset + limit > items.length) {\n      return;\n    }\n\n    console.log(\"Loading more\");\n    setOffset(offset => {\n      return offset + limit;\n    });\n    setLoadedItems(loadedItems => {\n      return [...loadedItems, ...items.slice(offset, offset + limit)];\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    loadMore: () => loadMore(offset),\n    hasMore: true,\n    loader: /*#__PURE__*/React.createElement(CircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }),\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default InfiniteScrolls;","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/pages/SearchListPage/Component/InfiniteScrolls.js"],"names":["React","useState","InfiniteScroll","CircularProgress","CardContent","CardMedia","Moment","Skeleton","NumericLabel","connect","PropTypes","makeStyles","Typography","Row","Col","Grid","Container","Divider","TextTruncate","items","Array","fill","map","_","index","id","name","option","InfiniteScrolls","props","loadedIems","setLoadedItems","offset","setOffset","loadMore","limit","length","console","log","loadedItems","slice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,iBAAvB;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,mBAAnC;AACA,OAAOC,YAAP,MAAyB,qBAAzB,C,CAAgD;;AAGhD,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAnB,EAAsBC,GAAtB,CAA0B,CAACC,CAAD,EAAIC,KAAJ,MAAe;AACrDC,EAAAA,EAAE,EAAED,KADiD;AAErDE,EAAAA,IAAI,EAAG,UAASF,KAAM;AAF+B,CAAf,CAA1B,CAAd;AAKA,MAAMG,MAAM,GAAG;AACb,mBAAiB,GADJ;AAEb,aAAW,OAFE;AAGb,cAAW,KAHE;AAIb,gBAAc,KAJD;AAKb,iBAAc,MALD;AAMb,aAAW,IANE;AAOb,cAAY,CAAC,KAAD,CAPC;AAQb,iBAAe,IARF;AASb,yBAAuB,KATV;AAUb,WAAS;AAVI,CAAf;;AAcA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM,CAACC,UAAD,EAAaC,cAAb,IAA+B9B,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAAC+B,MAAD,EAASC,SAAT,IAAsBhC,QAAQ,CAAC,CAAD,CAApC;;AAEA,QAAMiC,QAAQ,GAAG,CAACF,MAAM,GAAG,CAAV,EAAaG,KAAK,GAAG,EAArB,KAA4B;AAC3C,QAAIH,MAAM,GAAGG,KAAT,GAAiBhB,KAAK,CAACiB,MAA3B,EAAmC;AACjC;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAL,IAAAA,SAAS,CAACD,MAAM,IAAI;AAClB,aAAOA,MAAM,GAAGG,KAAhB;AACD,KAFQ,CAAT;AAGAJ,IAAAA,cAAc,CAACQ,WAAW,IAAI;AAC5B,aAAO,CAAC,GAAGA,WAAJ,EAAiB,GAAGpB,KAAK,CAACqB,KAAN,CAAYR,MAAZ,EAAoBA,MAAM,GAAGG,KAA7B,CAApB,CAAP;AACD,KAFa,CAAd;AAGD,GAXD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,MAAMD,QAAQ,CAACF,MAAD,CAD1B;AAEE,IAAA,OAAO,EAAE,IAFX;AAGE,IAAA,MAAM,eAAE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHV;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAE,CALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAoED;;AAED,eAAeJ,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Moment from 'react-moment';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport NumericLabel from 'react-pretty-numbers'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Row, Col} from 'react-bootstrap';\n\nimport Grid from '@material-ui/core/Grid';\nimport { Container, Divider } from '@material-ui/core';\nimport TextTruncate from 'react-text-truncate'; // recommend\n\n\nconst items = new Array(30).fill(0).map((_, index) => ({\n  id: index,\n  name: `Number ${index}`\n}));\n\nconst option = {\n  'justification': 'L',\n  'locales': 'en-US',\n  'currency':false,\n  'percentage': false,\n  'wholenumber':'ceil',\n  'commafy': true,\n  'cssClass': ['red'],\n  'shortFormat': true,\n  'shortFormatMinValue': 10000,\n  'title': true\n  };\n\n\nfunction InfiniteScrolls(props) {\n  const [loadedIems, setLoadedItems] = useState([]);\n  const [offset, setOffset] = useState(0);\n\n  const loadMore = (offset = 0, limit = 10) => {\n    if (offset + limit > items.length) {\n      return;\n    }\n    console.log(\"Loading more\");\n    setOffset(offset => {\n      return offset + limit;\n    });\n    setLoadedItems(loadedItems => {\n      return [...loadedItems, ...items.slice(offset, offset + limit)];\n    });\n  };\n  \n\n  return (\n    <div className=\"App\">\n\n      <InfiniteScroll\n        loadMore={() => loadMore(offset)}\n        hasMore={true}\n        loader={<CircularProgress />}\n        container\n        spacing={3}\n      >\n        {/* {props.value ? props\n                        .map((data)=>(\n                            <Grid container style={{  marginTop: '20px ' }}> \n                                <Grid item  xs={3.8}>\n                                    <div style={{ width: '260px', height: 'fit-content' }}>\n                                        <CardMedia\n                                        component=\"img\"\n                                        alt={data.title}\n                                        height=\"140\"\n                                        image={data.thumbnailsHight}\n                                        title=\"Contemplative Reptile\"\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item  xs={8} style={{ marginLeft: '18px' }}>\n                                    <CardContent  style={{ padding: '0' }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h5\">\n                                            {data.title}\n                                        </Typography>\n                                        <Typography gutterBottom variant=\"caption\" component=\"body1\" style={{ textOverflow:  'ellipsis', overflow: 'hidden' }}>\n                                            <TextTruncate\n                                                line={2}\n                                                element=\"span\"\n                                                truncateText=\"â€¦\"\n                                                text={data.description}\n                                            />\n                                        </Typography>\n                                        <Grid container>\n                                            <Grid style={{ marginTop: '20px' }}>\n                                                <Row xs={3}>\n                                                    <Col xs={1}>\n                                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                                            <NumericLabel params={option}>{data.viewCount}</NumericLabel> \n                                                        </Typography>\n                                                    </Col>\n                                                    <Col xs={2}>\n                                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                                            views\n                                                        </Typography>\n                                                    </Col>\n                                                </Row>\n                                            </Grid>\n                                            <Grid  style={{ marginTop: '20px' }}>\n                                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                                    Published  <Moment fromNow>{data.publishedAt}</Moment>\n                                                </Typography>\n                                            </Grid>\n                                        </Grid>\n                                </CardContent>          \n                                </Grid>\n                            </Grid>\n                        )):\n                            \"\"\n                    } */}\n\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default InfiniteScrolls\n"]},"metadata":{},"sourceType":"module"}