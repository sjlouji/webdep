{"ast":null,"code":"import { fork, take, takeEvery, call, all, put } from 'redux-saga/effects';\nimport * as api from '../api/youtube-api';\nimport * as videoActions from '../actions/video';\nimport { REQUEST } from '../actions';\nimport { fetchEntity, ignoreErrors } from './index';\nexport const fetchVideoCategories = fetchEntity.bind(null, api.buildVideoCategoriesRequest, videoActions.categories);\nexport function* fetchMostPopularVideosByCategory(categories) {\n  const requests = categories.map(categoryId => {\n    const wrapper = ignoreErrors(api.buildMostPopularVideosRequest, 12, false, null, categoryId);\n    return call(wrapper);\n  });\n\n  try {\n    const response = yield all(requests);\n    yield put(videoActions.mostPopularByCategory.success(response, categories));\n  } catch (error) {\n    yield put(videoActions.mostPopularByCategory.failure(error));\n  }\n}\nexport function* fetchMostPopularVideos(amount, loadDescription, nextPageToken) {\n  const request = api.buildMostPopularVideosRequest.bind(null, amount, loadDescription, nextPageToken);\n  yield fetchEntity(request, videoActions.mostPopular);\n}\n/******************************************************************************/\n\n/******************************* WATCHERS *************************************/\n\n/******************************************************************************/\n\nexport function* watchMostPopularVideos() {\n  while (true) {\n    const {\n      amount,\n      loadDescription,\n      nextPageToken\n    } = yield take(videoActions.MOST_POPULAR[REQUEST]);\n    yield fork(fetchMostPopularVideos, amount, loadDescription, nextPageToken);\n  }\n}\nexport function* watchVideoCategories() {\n  yield takeEvery(videoActions.VIDEO_CATEGORIES[REQUEST], fetchVideoCategories);\n}\nexport function* watchMostPopularVideosByCategory() {\n  while (true) {\n    const {\n      categories\n    } = yield take(videoActions.MOST_POPULAR_BY_CATEGORY[REQUEST]);\n    yield fork(fetchMostPopularVideosByCategory, categories);\n  }\n}","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/sagas/video.js"],"names":["fork","take","takeEvery","call","all","put","api","videoActions","REQUEST","fetchEntity","ignoreErrors","fetchVideoCategories","bind","buildVideoCategoriesRequest","categories","fetchMostPopularVideosByCategory","requests","map","categoryId","wrapper","buildMostPopularVideosRequest","response","mostPopularByCategory","success","error","failure","fetchMostPopularVideos","amount","loadDescription","nextPageToken","request","mostPopular","watchMostPopularVideos","MOST_POPULAR","watchVideoCategories","VIDEO_CATEGORIES","watchMostPopularVideosByCategory","MOST_POPULAR_BY_CATEGORY"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,GAA1C,QAAoD,oBAApD;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,OAAO,KAAKC,YAAZ,MAA8B,kBAA9B;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,SAAxC;AAEA,OAAO,MAAMC,oBAAoB,GAAGF,WAAW,CAACG,IAAZ,CAAiB,IAAjB,EAAuBN,GAAG,CAACO,2BAA3B,EAAwDN,YAAY,CAACO,UAArE,CAA7B;AAGP,OAAO,UAAUC,gCAAV,CAA2CD,UAA3C,EAAuD;AAC5D,QAAME,QAAQ,GAAGF,UAAU,CAACG,GAAX,CAAeC,UAAU,IAAI;AAC5C,UAAMC,OAAO,GAAGT,YAAY,CAACJ,GAAG,CAACc,6BAAL,EAAoC,EAApC,EAAwC,KAAxC,EAA+C,IAA/C,EAAqDF,UAArD,CAA5B;AACA,WAAOf,IAAI,CAACgB,OAAD,CAAX;AACD,GAHgB,CAAjB;;AAIA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMjB,GAAG,CAACY,QAAD,CAA1B;AACA,UAAMX,GAAG,CAACE,YAAY,CAACe,qBAAb,CAAmCC,OAAnC,CAA2CF,QAA3C,EAAqDP,UAArD,CAAD,CAAT;AACD,GAHD,CAGE,OAAOU,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACE,YAAY,CAACe,qBAAb,CAAmCG,OAAnC,CAA2CD,KAA3C,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,sBAAV,CAAiCC,MAAjC,EAAyCC,eAAzC,EAA0DC,aAA1D,EAAyE;AAC9E,QAAMC,OAAO,GAAGxB,GAAG,CAACc,6BAAJ,CAAkCR,IAAlC,CAAuC,IAAvC,EAA6Ce,MAA7C,EAAqDC,eAArD,EAAsEC,aAAtE,CAAhB;AACA,QAAMpB,WAAW,CAACqB,OAAD,EAAUvB,YAAY,CAACwB,WAAvB,CAAjB;AACD;AAGD;;AACA;;AACA;;AACA,OAAO,UAAUC,sBAAV,GAAmC;AACxC,SAAO,IAAP,EAAa;AACX,UAAM;AAACL,MAAAA,MAAD;AAASC,MAAAA,eAAT;AAA0BC,MAAAA;AAA1B,QAA2C,MAAM5B,IAAI,CAACM,YAAY,CAAC0B,YAAb,CAA0BzB,OAA1B,CAAD,CAA3D;AACA,UAAMR,IAAI,CAAC0B,sBAAD,EAAyBC,MAAzB,EAAiCC,eAAjC,EAAkDC,aAAlD,CAAV;AACD;AACF;AAED,OAAO,UAAUK,oBAAV,GAAiC;AACtC,QAAMhC,SAAS,CAACK,YAAY,CAAC4B,gBAAb,CAA8B3B,OAA9B,CAAD,EAAyCG,oBAAzC,CAAf;AACD;AACD,OAAO,UAAUyB,gCAAV,GAA6C;AAClD,SAAM,IAAN,EAAY;AACV,UAAM;AAACtB,MAAAA;AAAD,QAAe,MAAMb,IAAI,CAACM,YAAY,CAAC8B,wBAAb,CAAsC7B,OAAtC,CAAD,CAA/B;AACA,UAAMR,IAAI,CAACe,gCAAD,EAAmCD,UAAnC,CAAV;AACD;AACF","sourcesContent":["import {fork, take, takeEvery, call, all, put} from 'redux-saga/effects';\nimport * as api from '../api/youtube-api';\nimport * as videoActions from '../actions/video';\nimport {REQUEST} from '../actions';\nimport {fetchEntity, ignoreErrors} from './index';\n\nexport const fetchVideoCategories = fetchEntity.bind(null, api.buildVideoCategoriesRequest, videoActions.categories);\n\n\nexport function* fetchMostPopularVideosByCategory(categories) {\n  const requests = categories.map(categoryId => {\n    const wrapper = ignoreErrors(api.buildMostPopularVideosRequest, 12, false, null, categoryId);\n    return call(wrapper);\n  });\n  try {\n    const response = yield all(requests);\n    yield put(videoActions.mostPopularByCategory.success(response, categories));\n  } catch (error) {\n    yield put(videoActions.mostPopularByCategory.failure(error));\n  }\n}\n\nexport function* fetchMostPopularVideos(amount, loadDescription, nextPageToken) {\n  const request = api.buildMostPopularVideosRequest.bind(null, amount, loadDescription, nextPageToken);\n  yield fetchEntity(request, videoActions.mostPopular);\n}\n\n\n/******************************************************************************/\n/******************************* WATCHERS *************************************/\n/******************************************************************************/\nexport function* watchMostPopularVideos() {\n  while (true) {\n    const {amount, loadDescription, nextPageToken} = yield take(videoActions.MOST_POPULAR[REQUEST]);\n    yield fork(fetchMostPopularVideos, amount, loadDescription, nextPageToken);\n  }\n}\n\nexport function* watchVideoCategories() {\n  yield takeEvery(videoActions.VIDEO_CATEGORIES[REQUEST], fetchVideoCategories);\n}\nexport function* watchMostPopularVideosByCategory() {\n  while(true) {\n    const {categories} = yield take(videoActions.MOST_POPULAR_BY_CATEGORY[REQUEST]);\n    yield fork(fetchMostPopularVideosByCategory, categories);\n  }\n}"]},"metadata":{},"sourceType":"module"}