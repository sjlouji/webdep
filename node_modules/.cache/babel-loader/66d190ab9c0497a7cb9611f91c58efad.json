{"ast":null,"code":"import { all, call, put, fork } from 'redux-saga/effects';\nimport { watchMostPopularVideos, watchMostPopularVideosByCategory, watchVideoCategories } from './video';\nimport { watchWatchDetails } from './watch';\nimport { watchCommentThread } from './comment';\nimport { watchSearchForVideos } from './search';\nexport default function* () {\n  yield all([fork(watchMostPopularVideos), fork(watchVideoCategories), fork(watchMostPopularVideosByCategory), fork(watchWatchDetails), fork(watchCommentThread), fork(watchSearchForVideos)]);\n}\n/*\n* entity must have a success, request and failure method\n* request is a function that returns a promise when called\n* */\n\nexport function* fetchEntity(request, entity, ...args) {\n  try {\n    const response = yield call(request); // we directly return the result object and throw away the headers and the status text here\n    // if status and headers are needed, then instead of returning response.result, we have to return just response.\n\n    yield put(entity.success(response.result, ...args));\n  } catch (error) {\n    yield put(entity.failure(error, ...args));\n  }\n}\nexport function ignoreErrors(fn, ...args) {\n  return () => {\n    const ignoreErrorCallback = response => response;\n\n    return fn(...args).then(ignoreErrorCallback, ignoreErrorCallback);\n  };\n}","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/sagas/index.js"],"names":["all","call","put","fork","watchMostPopularVideos","watchMostPopularVideosByCategory","watchVideoCategories","watchWatchDetails","watchCommentThread","watchSearchForVideos","fetchEntity","request","entity","args","response","success","result","error","failure","ignoreErrors","fn","ignoreErrorCallback","then"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SAAQC,sBAAR,EAAgCC,gCAAhC,EAAkEC,oBAAlE,QAA6F,SAA7F;AACA,SAAQC,iBAAR,QAAgC,SAAhC;AACA,SAAQC,kBAAR,QAAiC,WAAjC;AACA,SAAQC,oBAAR,QAAmC,UAAnC;AACA,eAAe,aAAa;AAC1B,QAAMT,GAAG,CAAC,CACRG,IAAI,CAACC,sBAAD,CADI,EAERD,IAAI,CAACG,oBAAD,CAFI,EAGRH,IAAI,CAACE,gCAAD,CAHI,EAIRF,IAAI,CAACI,iBAAD,CAJI,EAKRJ,IAAI,CAACK,kBAAD,CALI,EAMRL,IAAI,CAACM,oBAAD,CANI,CAAD,CAAT;AAQD;AAED;;;;;AAIA,OAAO,UAAUC,WAAV,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC,GAAGC,IAA1C,EAAgD;AACrD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACU,OAAD,CAA3B,CADE,CAEF;AACA;;AACA,UAAMT,GAAG,CAACU,MAAM,CAACG,OAAP,CAAeD,QAAQ,CAACE,MAAxB,EAAgC,GAAGH,IAAnC,CAAD,CAAT;AACD,GALD,CAKE,OAAOI,KAAP,EAAc;AACd,UAAMf,GAAG,CAACU,MAAM,CAACM,OAAP,CAAeD,KAAf,EAAsB,GAAGJ,IAAzB,CAAD,CAAT;AACD;AACF;AAED,OAAO,SAASM,YAAT,CAAsBC,EAAtB,EAA0B,GAAGP,IAA7B,EAAmC;AACxC,SAAO,MAAM;AACX,UAAMQ,mBAAmB,GAAIP,QAAD,IAAcA,QAA1C;;AACA,WAAOM,EAAE,CAAC,GAAGP,IAAJ,CAAF,CAAYS,IAAZ,CAAiBD,mBAAjB,EAAsCA,mBAAtC,CAAP;AACD,GAHD;AAID","sourcesContent":["import {all, call, put, fork} from 'redux-saga/effects';\nimport {watchMostPopularVideos, watchMostPopularVideosByCategory, watchVideoCategories} from './video';\nimport {watchWatchDetails} from './watch';\nimport {watchCommentThread} from './comment';\nimport {watchSearchForVideos} from './search';\nexport default function* () {\n  yield all([\n    fork(watchMostPopularVideos),\n    fork(watchVideoCategories),\n    fork(watchMostPopularVideosByCategory),\n    fork(watchWatchDetails),\n    fork(watchCommentThread),\n    fork(watchSearchForVideos)\n  ]);\n}\n\n/*\n* entity must have a success, request and failure method\n* request is a function that returns a promise when called\n* */\nexport function* fetchEntity(request, entity, ...args) {\n  try {\n    const response = yield call(request);\n    // we directly return the result object and throw away the headers and the status text here\n    // if status and headers are needed, then instead of returning response.result, we have to return just response.\n    yield put(entity.success(response.result, ...args));\n  } catch (error) {\n    yield put(entity.failure(error, ...args));\n  }\n}\n\nexport function ignoreErrors(fn, ...args) {\n  return () => {\n    const ignoreErrorCallback = (response) => response;\n    return fn(...args).then(ignoreErrorCallback, ignoreErrorCallback);\n  };\n}"]},"metadata":{},"sourceType":"module"}