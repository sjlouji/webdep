{"ast":null,"code":"import _regeneratorRuntime from\"/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(_callee),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchEntity);import{all,call,put,fork}from'redux-saga/effects';import{watchMostPopularVideos,watchMostPopularVideosByCategory,watchVideoCategories}from'./video';import{watchWatchDetails}from'./watch';import{watchCommentThread}from'./comment';import{watchSearchForVideos}from'./search';export default function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return all([fork(watchMostPopularVideos),fork(watchVideoCategories),fork(watchMostPopularVideosByCategory),fork(watchWatchDetails),fork(watchCommentThread),fork(watchSearchForVideos)]);case 2:case\"end\":return _context.stop();}}},_marked);}/*\n* entity must have a success, request and failure method\n* request is a function that returns a promise when called\n* */export function fetchEntity(request,entity){var _len,args,_key,response,_args2=arguments;return _regeneratorRuntime.wrap(function fetchEntity$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:for(_len=_args2.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=_args2[_key];}_context2.prev=1;_context2.next=4;return call(request);case 4:response=_context2.sent;_context2.next=7;return put(entity.success.apply(entity,[response.result].concat(args)));case 7:_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);_context2.next=13;return put(entity.failure.apply(entity,[_context2.t0].concat(args)));case 13:case\"end\":return _context2.stop();}}},_marked2,null,[[1,9]]);}export function ignoreErrors(fn){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}return function(){var ignoreErrorCallback=function ignoreErrorCallback(response){return response;};return fn.apply(void 0,args).then(ignoreErrorCallback,ignoreErrorCallback);};}","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/sagas/index.js"],"names":["fetchEntity","all","call","put","fork","watchMostPopularVideos","watchMostPopularVideosByCategory","watchVideoCategories","watchWatchDetails","watchCommentThread","watchSearchForVideos","request","entity","args","response","success","result","failure","ignoreErrors","fn","ignoreErrorCallback","then"],"mappings":"yRAoBiBA,W,EApBjB,OAAQC,GAAR,CAAaC,IAAb,CAAmBC,GAAnB,CAAwBC,IAAxB,KAAmC,oBAAnC,CACA,OAAQC,sBAAR,CAAgCC,gCAAhC,CAAkEC,oBAAlE,KAA6F,SAA7F,CACA,OAAQC,iBAAR,KAAgC,SAAhC,CACA,OAAQC,kBAAR,KAAiC,WAAjC,CACA,OAAQC,oBAAR,KAAmC,UAAnC,CACA,cAAe,oJACb,MAAMT,CAAAA,GAAG,CAAC,CACRG,IAAI,CAACC,sBAAD,CADI,CAERD,IAAI,CAACG,oBAAD,CAFI,CAGRH,IAAI,CAACE,gCAAD,CAHI,CAIRF,IAAI,CAACI,iBAAD,CAJI,CAKRJ,IAAI,CAACK,kBAAD,CALI,CAMRL,IAAI,CAACM,oBAAD,CANI,CAAD,CAAT,CADa,sDAWf;;;IAIA,MAAO,SAAUV,CAAAA,WAAV,CAAsBW,OAAtB,CAA+BC,MAA/B,6LAA0CC,IAA1C,qDAA0CA,IAA1C,yDAEc,MAAMX,CAAAA,IAAI,CAACS,OAAD,CAAV,CAFd,OAEGG,QAFH,iCAKH,MAAMX,CAAAA,GAAG,CAACS,MAAM,CAACG,OAAP,OAAAH,MAAM,EAASE,QAAQ,CAACE,MAAlB,SAA6BH,IAA7B,EAAP,CAAT,CALG,4GAOH,MAAMV,CAAAA,GAAG,CAACS,MAAM,CAACK,OAAP,OAAAL,MAAM,uBAAmBC,IAAnB,EAAP,CAAT,CAPG,sEAWP,MAAO,SAASK,CAAAA,YAAT,CAAsBC,EAAtB,CAAmC,gCAANN,IAAM,2DAANA,IAAM,4BACxC,MAAO,WAAM,CACX,GAAMO,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACN,QAAD,QAAcA,CAAAA,QAAd,EAA5B,CACA,MAAOK,CAAAA,EAAE,MAAF,QAAMN,IAAN,EAAYQ,IAAZ,CAAiBD,mBAAjB,CAAsCA,mBAAtC,CAAP,CACD,CAHD,CAID","sourcesContent":["import {all, call, put, fork} from 'redux-saga/effects';\nimport {watchMostPopularVideos, watchMostPopularVideosByCategory, watchVideoCategories} from './video';\nimport {watchWatchDetails} from './watch';\nimport {watchCommentThread} from './comment';\nimport {watchSearchForVideos} from './search';\nexport default function* () {\n  yield all([\n    fork(watchMostPopularVideos),\n    fork(watchVideoCategories),\n    fork(watchMostPopularVideosByCategory),\n    fork(watchWatchDetails),\n    fork(watchCommentThread),\n    fork(watchSearchForVideos)\n  ]);\n}\n\n/*\n* entity must have a success, request and failure method\n* request is a function that returns a promise when called\n* */\nexport function* fetchEntity(request, entity, ...args) {\n  try {\n    const response = yield call(request);\n    // we directly return the result object and throw away the headers and the status text here\n    // if status and headers are needed, then instead of returning response.result, we have to return just response.\n    yield put(entity.success(response.result, ...args));\n  } catch (error) {\n    yield put(entity.failure(error, ...args));\n  }\n}\n\nexport function ignoreErrors(fn, ...args) {\n  return () => {\n    const ignoreErrorCallback = (response) => response;\n    return fn(...args).then(ignoreErrorCallback, ignoreErrorCallback);\n  };\n}"]},"metadata":{},"sourceType":"module"}