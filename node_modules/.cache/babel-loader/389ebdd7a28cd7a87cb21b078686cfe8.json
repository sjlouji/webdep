{"ast":null,"code":"import { SUCCESS } from '../actions';\nimport { WATCH_DETAILS } from '../actions/watch';\nimport { COMMENT_THREAD_LIST_RESPONSE } from '../api/youtube-api-response-types';\nimport { createSelector } from 'reselect';\nimport { COMMENT_THREAD } from '../actions/comment';\nimport { getSearchParam } from '../../services/url';\nconst initialState = {\n  byVideo: {},\n  byId: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case COMMENT_THREAD[SUCCESS]:\n      return reduceCommentThread(action.response, action.videoId, state);\n\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, action.videoId, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, videoId, prevState) {\n  const commentThreadResponse = responses.find(res => res.result.kind === COMMENT_THREAD_LIST_RESPONSE);\n  return reduceCommentThread(commentThreadResponse.result, videoId, prevState);\n}\n\nfunction reduceCommentThread(response, videoId, prevState) {\n  if (!response) {\n    return prevState;\n  }\n\n  const newComments = response.items.reduce((acc, item) => {\n    acc[item.id] = item;\n    return acc;\n  }, {}); // if we have already fetched some comments for a particular video\n  // we just append the ids for the new comments\n\n  const prevCommentIds = prevState.byVideo[videoId] ? prevState.byVideo[videoId].ids : [];\n  const commentIds = [...prevCommentIds, ...Object.keys(newComments)];\n  const byVideoComment = {\n    nextPageToken: response.nextPageToken,\n    ids: commentIds\n  };\n  return { ...prevState,\n    byId: { ...prevState.byId,\n      ...newComments\n    },\n    byVideo: { ...prevState.byVideo,\n      [videoId]: byVideoComment\n    }\n  };\n}\n/*\n* Selectors\n */\n\n\nconst getCommentIdsForVideo = (state, videoId) => {\n  const comment = state.comments.byVideo[videoId];\n\n  if (comment) {\n    return comment.ids;\n  }\n\n  return [];\n};\n\nexport const getCommentsForVideo = createSelector(getCommentIdsForVideo, state => state.comments.byId, (commentIds, allComments) => {\n  return commentIds.map(commentId => allComments[commentId]);\n});\n\nconst getComment = (state, location) => {\n  const videoId = getSearchParam(location, 'v');\n  return state.comments.byVideo[videoId];\n};\n\nexport const getCommentNextPageToken = createSelector(getComment, comment => {\n  return comment ? comment.nextPageToken : null;\n});","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/punithargal.org/api/frontend/src/store/reducers/comments.js"],"names":["SUCCESS","WATCH_DETAILS","COMMENT_THREAD_LIST_RESPONSE","createSelector","COMMENT_THREAD","getSearchParam","initialState","byVideo","byId","state","action","type","reduceCommentThread","response","videoId","reduceWatchDetails","responses","prevState","commentThreadResponse","find","res","result","kind","newComments","items","reduce","acc","item","id","prevCommentIds","ids","commentIds","Object","keys","byVideoComment","nextPageToken","getCommentIdsForVideo","comment","comments","getCommentsForVideo","allComments","map","commentId","getComment","location","getCommentNextPageToken"],"mappings":"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","sourcesContent":["import {SUCCESS} from '../actions';\nimport {WATCH_DETAILS} from '../actions/watch';\nimport {COMMENT_THREAD_LIST_RESPONSE} from '../api/youtube-api-response-types';\nimport {createSelector} from 'reselect';\nimport {COMMENT_THREAD} from '../actions/comment';\nimport {getSearchParam} from '../../services/url';\n\nconst initialState = {\n  byVideo: {},\n  byId: {},\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case COMMENT_THREAD[SUCCESS]:\n      return reduceCommentThread(action.response, action.videoId, state);\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, action.videoId, state);\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, videoId, prevState) {\n  const commentThreadResponse = responses.find(res => res.result.kind === COMMENT_THREAD_LIST_RESPONSE);\n  return reduceCommentThread(commentThreadResponse.result, videoId, prevState);\n}\n\nfunction reduceCommentThread(response, videoId, prevState) {\n  if (!response) {\n    return prevState;\n  }\n  const newComments = response.items.reduce((acc, item) => {\n    acc[item.id] = item;\n    return acc;\n  }, {});\n\n  // if we have already fetched some comments for a particular video\n  // we just append the ids for the new comments\n  const prevCommentIds = prevState.byVideo[videoId] ? prevState.byVideo[videoId].ids : [];\n  const commentIds = [...prevCommentIds, ...Object.keys(newComments)];\n\n  const byVideoComment = {\n    nextPageToken: response.nextPageToken,\n    ids: commentIds,\n  };\n\n  return {\n    ...prevState,\n    byId: {\n      ...prevState.byId,\n      ...newComments,\n    },\n    byVideo: {\n      ...prevState.byVideo,\n      [videoId]: byVideoComment,\n    }\n  };\n}\n\n/*\n* Selectors\n */\nconst getCommentIdsForVideo = (state, videoId) => {\n  const comment = state.comments.byVideo[videoId];\n  if (comment) {\n    return comment.ids;\n  }\n  return [];\n};\nexport const getCommentsForVideo = createSelector(\n  getCommentIdsForVideo,\n  state => state.comments.byId,\n  (commentIds, allComments) => {\n    return commentIds.map(commentId => allComments[commentId]);\n  }\n);\n\nconst getComment = (state, location) => {\n  const videoId = getSearchParam(location, 'v');\n  return state.comments.byVideo[videoId];\n};\nexport const getCommentNextPageToken = createSelector(\n  getComment,\n  (comment) => {\n    return comment ? comment.nextPageToken : null;\n  }\n);"]},"metadata":{},"sourceType":"module"}