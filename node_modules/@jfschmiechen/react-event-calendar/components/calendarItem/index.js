'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Card = require('@material-ui/core/Card');

var _Card2 = _interopRequireDefault(_Card);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _event = require('../event');

var _event2 = _interopRequireDefault(_event);

var _miniEvent = require('../miniEvent');

var _miniEvent2 = _interopRequireDefault(_miniEvent);

var _strings = require('../../resources/values/strings');

require('./style.css');

var _utilities = require('../../resources/utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CalendarItem = function CalendarItem(props) {
    var eventArray = props.eventArray,
        tileIndex = props.tileIndex,
        month = props.month,
        year = props.year,
        numTiles = props.numTiles,
        config = props.config;

    var _displayCalendarNumbe = displayCalendarNumber(month, year, tileIndex, config),
        isToday = _displayCalendarNumbe.isToday,
        number = _displayCalendarNumbe.number,
        notPrimary = _displayCalendarNumbe.notPrimary;

    var _config$colors = config.colors,
        primaryColor = _config$colors.primaryColor,
        secondaryColor = _config$colors.secondaryColor;
    var isMobile = config.isMobile;

    // Tiles with the week day names need to be longer so that they have the same room as other
    // tiles. + 2 is the increased height, and the longer formula below maintains a consistent
    // calendar height despite the alternating number of tiles in each month.

    var tileHeight = tileIndex < 7 ? 100 / (numTiles / 7) + 2 + '%' : 100 / (numTiles / 7) - 2 / (numTiles / 7 - 1) + '%';

    return _react2.default.createElement(
        _Card2.default,
        {
            elevation: 0,
            square: true,
            id: 'tile-' + tileIndex,
            className: 'calendar-tile',
            onClick: function onClick(e) {
                config.onTileClick(e, eventArray);
            },
            style: {
                height: tileHeight,
                width: 100 / 7 + '%',
                boxShadow: isToday ? '0 -2px 0 ' + primaryColor : null,
                outline: !isMobile ? '0.5px solid lightgray' : null
            }
        },
        _react2.default.createElement(
            'div',
            { style: { color: isToday ? primaryColor : null } },
            _react2.default.createElement(
                'p',
                { className: 'week-day-headers', style: { color: secondaryColor } },
                tileIndex < 7 ? _react2.default.createElement(
                    'span',
                    null,
                    !isMobile ? (0, _moment2.default)(tileIndex, 'e').format('dddd') : (0, _moment2.default)(tileIndex, 'e').format('ddd')
                ) : null
            ),
            _react2.default.createElement(
                'div',
                { style: { color: notPrimary ? secondaryColor : null } },
                !isMobile ? number === 1 ? renderMonthWithTileIndex(month, year, tileIndex, config) + ' ' + number : number : number
            )
        ),
        !isMobile ? eventArray.map(function (event, index) {
            return index < 4 ? displayEventsWithLengths(event, month, year, number, tileIndex, index, eventArray, config) : null;
        }) : _react2.default.createElement(_miniEvent2.default, { color: primaryColor, eventCount: eventArray.length })
    );
};

exports.default = CalendarItem;


function renderMonthWithTileIndex(month, year, tileIndex, config) {
    var currentMonth = (0, _moment2.default)(year + '-' + month + '-01', 'YYYY-M-DD');
    var numDays = config.numDaysInMonth[month - 1 > 0 ? 11 : month - 1];
    var offset = getMonthStartOffset(month, year);

    if (tileIndex < numDays - offset) {
        return currentMonth.format('MMM');
    } else {
        return (0, _moment2.default)(year + '-' + (month + 1 > 12 ? 1 : month + 1) + '-01', 'YYYY-M-DD').format('MMM');
    }
}

function getMonthStartOffset(month, year) {
    return (0, _moment2.default)(year + '-' + month + '-01', "YYYY-M-DD").day();
}

function renderEventWithProps(event, eventType, props) {
    return _react2.default.createElement(_event2.default, _extends({
        key: props.id,
        eventType: eventType,
        text: event.text,
        start: event.start,
        end: event.end,
        location: event.location
    }, props));
}

function displayCalendarNumber(month, year, tileIndex, config) {
    var offset = getMonthStartOffset(month, year);
    var numDays = config.numDaysInMonth[month - 1];
    var numDaysInLastMonth = config.numDaysInMonth[month - 2 > 0 ? month - 2 : 0];

    var today = new Date().getDate();
    var thisMonth = new Date().getMonth() + 1;
    var thisYear = new Date().getFullYear();

    var difference = numDaysInLastMonth - offset + tileIndex + 1;

    if (difference < numDaysInLastMonth + 1) {
        return {
            notPrimary: true,
            isToday: false,
            number: difference
        };
    } else {
        if (tileIndex - offset + 1 > numDays) {
            return {
                notPrimary: true,
                isToday: false,
                number: tileIndex - offset + 1 - numDays
            };
        } else {
            return {
                notPrimary: false,
                isToday: tileIndex - offset + 1 === today && month === thisMonth && year === thisYear,
                number: tileIndex - offset + 1
            };
        }
    }
}

function displayEventsWithLengths(event, month, year, calendarNumber, tileIndex, index, eventArray, config) {
    var offset = getMonthStartOffset(month, year);
    var numTiles = offset + config.numDaysInMonth[month - 1] > 35 ? 35 + 7 : 35;
    var tileOverflowOffset = numTiles > 35 ? 1 : 0;

    if (index < 4 - tileOverflowOffset) {
        var numDaysInLastMonth = config.numDaysInMonth[month - 2 >= 0 ? month - 2 : 11];
        var numDaysInNextMonth = config.numDaysInMonth[month <= 11 ? month : 0];
        var numDays = config.numDaysInMonth[month - 1];

        var argsObject = { numDays: numDays,
            numDaysInMonth: config.numDaysInMonth,
            numDaysInLastMonth: numDaysInLastMonth,
            numDaysInNextMonth: numDaysInNextMonth,
            offset: offset,
            month: month,
            year: year,
            numTiles: numTiles
        };

        var _parseEvent = (0, _utilities.parseEvent)(event, argsObject, config),
            parsedDay = _parseEvent.parsedDay,
            parsedEnd = _parseEvent.parsedEnd,
            isBelowEventRange = _parseEvent.isBelowEventRange,
            isAboveEventRange = _parseEvent.isAboveEventRange;

        var difference = Math.abs(parsedEnd - parsedDay);

        // If multi-day event has no room to display itself, we will have to hide placeholder events too.
        var cutOff = event.type !== _strings.SINGLE_DAY_TYPE ? 4 - tileOverflowOffset : 5 - tileOverflowOffset;

        var styleObj = {
            width: tileIndex === numTiles - 1 ? 100 - 10 + '%' : 100 * difference - 10 + '%',
            height: 100 / (numTiles / 7),
            color: event.color ? event.color : config.colors.primaryColor
        };

        var eventProps = {
            id: '' + calendarNumber + index,
            onClick: function onClick(e) {
                e.stopPropagation();
                config.onEventClick(e, event, eventArray);
            },
            styleObj: styleObj,
            tileIndex: tileIndex,
            numTiles: numTiles
        };

        if (eventArray.length < cutOff || index !== 3 - tileOverflowOffset) {
            switch (event.type) {
                case _strings.MULTI_DAY_TYPE:
                    return renderEventWithProps(event, 'multi-day-event', _extends({
                        showArrowAfter: isAboveEventRange && tileIndex === numTiles - 1,
                        showArrowBefore: isBelowEventRange && tileIndex === 0
                    }, eventProps));

                case _strings.SINGLE_DAY_TYPE:
                    return renderEventWithProps(event, 'single-day-event', eventProps);

                default:
                    return renderEventWithProps(event, 'placeholder-event', eventProps);

            }
        } else {
            return _react2.default.createElement(
                'span',
                {
                    key: 'plusMore-' + tileIndex,
                    className: 'plus-more',
                    style: { color: config.colors.primaryColor },
                    onClick: function onClick(e) {
                        e.stopPropagation();
                        config.onPlusMoreClick(e, eventArray);
                    } },
                '+' + (eventArray.length - index) + ' more'
            );
        }
    }
}
