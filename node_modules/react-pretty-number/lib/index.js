'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var PrettyNumber = function (_React$Component) {
    _inherits(PrettyNumber, _React$Component);

    function PrettyNumber(props) {
        _classCallCheck(this, PrettyNumber);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PrettyNumber).call(this, props));

        _this.abbreviate = _this.abbreviate.bind(_this);
        _this.delimit = _this.delimit.bind(_this);
        return _this;
    }

    _createClass(PrettyNumber, [{
        key: 'abbreviate',
        value: function abbreviate(number) {
            if (!number) return 0;

            var formatted_number = number;
            var unit_index = 0;

            while (Math.floor(formatted_number / 1000.0) >= 1) {
                // Jump up a 1000 bracket and round to 1 decimal
                formatted_number = Math.round(formatted_number / 100.0) / 10.0;
                unit_index += 1;
            }

            var unit = this.props.units[unit_index] || '';

            return formatted_number.toFixed(1).replace(/\.0+$/, '') + unit;
        }
    }, {
        key: 'delimit',
        value: function delimit(number) {
            if (!number) return 0;

            var delimited_number = number.toLocaleString();

            return delimited_number.replace(/\.0+$/, '');
        }
    }, {
        key: 'display',
        value: function display() {
            if (this.props.abbreviate === false || this.props.units === false) {
                return this.delimit(this.props.number);
            } else {
                return this.abbreviate(this.props.number);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var number = this.props.number;


            return React.createElement(
                'span',
                { className: this.props.className, title: this.delimit(number) },
                this.display(number)
            );
        }
    }]);

    return PrettyNumber;
}(React.Component);

PrettyNumber.propTypes = {
    number: React.PropTypes.number.isRequired,
    abbreviate: React.PropTypes.bool,
    units: React.PropTypes.array,
    className: React.PropTypes.string
};

PrettyNumber.defaultProps = {
    abbreviate: true,
    units: ['', 'K', 'M', 'B', 'T', 'Q'],
    className: ''
};

module.exports = PrettyNumber;